{"version":3,"sources":["utils/API.js","components/Grid/index.js","components/Button/index.js","components/DashCard/index.js","components/EventLine/index.js","components/SideNav/index.js","components/TopNav/index.js","components/NewEventForm/newEventTable.js","components/EditEvent/index.js","components/ViewEvent/index.js","components/Modal/modalBody.js","pages/Dashboard.js","components/HouseHold/MemberFormRow.js","components/HouseHold/index.js","pages/Signup.js","components/Firebase/index.js","components/LoginText/index.js","pages/Home.js","components/Firebase/firebaseConfig.js","App.js","serviceWorker.js","index.js","components/utilityFunctions/index.js"],"names":["getHouseholdEvents","householdId","userId","type","axios","get","login","userData","put","createEvent","eventData","post","updateEvent","id","getMember","getHousehold","upsertMembers","data","createHousehold","body","addHouseholdMembers","Container","fluid","children","className","Row","settings","Col","size","split","map","join","Button","this","props","onClick","event","clickEvent","identifier","clickEventParam","icon","aria-hidden","title","Component","DashCard","state","showmoreIcon","clickShowMoreLessEvent","newState","setState","toggleAction","onClickShowHide","eventDate","nextProps","firstdashcard","EventLine","clickEditEvent","console","log","clickAssignEvent","onClickAssign","event_id","clickCompleteEvent","onClickComplete","isCompleted","iconCompleted","isAssigned","iconAssigned","viewEvent","iconView","editEvent","iconEdit","showhideclass","time","duration","creator","assigned","onClickView","onClickViewParam","onClickEdit","onClickEditParam","SideNav","open","navWidth","width","openNav","closeNav","handleLogout","sessionStorage","clear","firebase","signOut","then","err","style","href","TopNav","slideOut","householdName","NewEventTable","handleChange","newDate","date","handleTypeSelector","eventType","target","value","handleTitleInput","eventTitle","trim","handleStartTimeInput","eventStartTime","handleEndTimeInput","eventEndTime","handleStartTimeSelector","eventStartTimeSelector","handleEndTimeSelector","eventEndTimeSelector","handleDateInput","handleStartLocationInput","eventStartLocation","handleEndLocationInput","eventEndLocation","handleDetailsInput","eventDetails","validateDateAndTime","dateString","startTimeString","endTimeString","startSelector","endSelector","a","dateParts","startDate","Date","isNaN","getDate","today","match","startTimeParts","endTimeParts","startTimeHH","parseInt","startTimeMM","endTimeHH","endTimeMM","startTime","endTime","toISOString","handleSubmit","currentEvent","startTimeSelector","endTimeSelector","userInfo","UtilFunc","getLocalUserInfo","creatorId","memberId","API","toLowerCase","location1","location2","note","houseHoldId","getHouseholdIdFunction","modalClose","window","location","reload","alert","format","mode","inputFormat","Form","Group","controlId","Label","Control","placeholder","onChange","e","as","rows","data-dismiss","EditEvent","eventId","startTimeArr","ConvertTime","endTimeArr","AddEventType","ConvertDate","str","newTime","toLocaleTimeString","timeStyle","amPmStr","includes","replace","toLocaleDateString","day","month","year","ViewEvent","charAt","toUpperCase","slice","Capitalize","ModalCardBody","toggleModal","showModal","modalType","Modal","show","onHide","Header","closeButton","Title","Body","Dashboard","events","firstName","lastName","viewType","sidenavRef","React","createRef","modalRef","current","clickAddEvent","clickViewEvent","viewedEvent","getHouseholdId","showHideChange","newEvents","dateIndex","findIndex","newShowHideClass","i","itemIndex","dateEvent","modifyEventAssign","undefined","assigned_id","assignedStatus","splice","length","$set","$unset","assignee","res","catch","modifyEventStatus","status","currentHouseholdId","name","viewParam","search","hasOwnProperty","ref","key","creator_id","MemberFormRow","email","showAddButton","handleChangeFirstName","val","updateParentMemberState","handleChangeLastName","handleChangeEmail","currentParent","parentState","members","indexInState","readOnly","removeSelf","hidden","disabled","addNext","HouseHold","redirectToDashboard","redirectToHomepage","isCurrentUser","oauthKey","currentUser","Error","addMemberRow","preventDefault","currentState","push","setIndex","index","removeRow","deleted","handleChangeHouseholdName","submitHouseForm","createMode","results1","_id","setItem","results2","idsArray","newIds","forEach","member","userOauthKey","result3","handleCancel","Redirect","to","defaultProps","Signup","SignIn","uiConfig","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","user","uid","displayName","displayNameArray","getItem","userID","householdID","households","parent","redirectDashboard","redirectSignUp","firebaseAuth","LoginText","Content","posed","div","closed","height","Home","pose","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","App","Switch","Route","exact","path","component","SignUp","firebaseAppAuth","auth","providers","googleProvider","withFirebaseAuth","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.921eeaa3.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { func } from \"prop-types\";\n\nexport default {\n\n  // Gets all events for household\n  getHouseholdEvents: function(householdId,userId,type) {\n    //console.log(`HouseholdId: ${householdId} userid: ${userId} type: ${type}`)\n    switch (type) {\n      case \"all\": \n        return axios.get(`/api/event/all/${householdId}`);\n        break;\n      case \"unassigned\":\n        return axios.get(`/api/event/unassigned/${householdId}`);\n        break;  \n      case \"assigned\":\n          return axios.get(`/api/event/current-user-assigned/${householdId}/${userId}`);\n          break;   \n      case \"current-user\": \n        return axios.get(`/api/event/current-user/${householdId}/${userId}`);\n        break;   \n      default:\n          break; \n    }\n  },\n\n  // determing login route\n  login: function(userData) {\n    return axios.put(\"/api/member/login\", userData);\n  },\n\n  createEvent: function(eventData) {\n    return axios.post('/api/event', eventData );\n  },\n\n  updateEvent: function(id,eventData) {\n    return axios.put('/api/event/' + id, eventData );\n  },\n\n  getMember: function(id) {\n    return axios.get('/api/member/byId/' + id);\n  },\n\n  getHousehold: function(id) {\n    return axios.get('/api/household/byId/' + id);\n  },\n\n  upsertMembers: function(data) {\n    return axios.put('/api/member/update-many', data);\n  },\n\n  createHousehold: function(body) {\n    return axios.post('/api/household/create', body);\n  },\n\n  addHouseholdMembers: function(body) {\n    return axios.put('/api/household/add-members', body);\n  }\n\n  // addInvitee: function(id,eventData) {\n  //   return axios.put('/api/event/assign/' + id, eventData );\n  // },\n\n  // removeInvitee: function(id,eventData) {\n  //   return axios.put('/api/event/unassign/' + id, eventData );\n  // }\n\n};\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children, settings }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"} ${settings ? settings : ''}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}","import React, { Component } from 'react';\nimport \"./style.css\";\n\nclass Button extends Component {\n\n  render() {\n    return (\n      <button id={this.props.id} onClick={(event) => this.props.clickEvent(event,this.props.identifier,this.props.clickEventParam)} className=\"\">\n        <i className={`${this.props.icon}`} \n           aria-hidden=\"true\" /> {this.props.title}\n      </button>\n    )\n  }\n}\n\nexport default Button\n","import React, { Component } from 'react';\nimport Button from \"../Button/index\";\nimport \"./style.css\";\n\nclass DashCard extends Component {\n\n  state = {\n    showmoreIcon: this.props.showmoreIcon,\n  }\n\n  // reset state if the seeded prop is updated\n  // note: setting state from props can be considered\n  // anti-pattern in react - but due to a design issue\n  // with the layout of this component and its multi\n  // effected show-more/show-less icon (changes if icon is \n  // toggled but also if rows are removed on the Unassigned event\n  // page - thus this is necessary\n  // until more time allows for a better solution\n  componentWillReceiveProps(nextProps){\n    if (nextProps.showmoreIcon !== this.props.showmoreIcon) {\n      this.setState({ showmoreIcon: nextProps.showmoreIcon })\n    }\n  }\n\n  // click show more/less event button -toggle the icon \n  clickShowMoreLessEvent = () => {\n    // console.log(`you clicked the show more/less event button`);\n    var newState = (this.state.showmoreIcon === \"fas fa-angle-double-down fa-lg\") \n    ? \"fas fa-angle-double-up fa-lg\" : \"fas fa-angle-double-down fa-lg\";\n\n    this.setState({showmoreIcon: newState })\n    var toggleAction = (newState === \"fas fa-angle-double-up fa-lg\") ? \"show\" : \"hide\";\n    if(typeof this.props.onClickShowHide === 'function'){\n      this.props.onClickShowHide(toggleAction, this.props.eventDate);\n    }\n  }\n\n  render() {\n    // console.log(`props: ${this.props.showmoreIcon}`)\n    return (\n      <div className=\"card \">\n        <div className={`card-header ${this.props.firstdashcard}`}>\n          <h3>\n            <i className={this.props.icon} \n                aria-hidden=\"true\" /> {this.props.title}\n            <Button id={this.props.id} icon={this.state.showmoreIcon} clickEvent={this.clickShowMoreLessEvent}title=\"\"></Button>\n          </h3>\n        </div>\n        <div className=\"card-body-fluid\">{this.props.children}</div>\n    </div>\n\n    )\n  }\n}\n\nexport default DashCard\n\n\n","import React, { Component } from 'react';\nimport { Row, Col } from \"../Grid/index\";\nimport Button from \"../Button/index\";\n//import Icon from \"../Icon\";\nimport \"./style.css\";\n\nclass EventLine extends Component {\n\n  state = {\n  }\n\n  // click view event button \n  // clickViewEvent = () => {\n\n  //   if (typeof this.props.clickViewEvent === 'function') {\n\n  //     this.props.clickViewEvent(this.props.event_id);\n  //     console.log('here i am')\n\n  //   }\n  // }\n\n  // click edit event button \n  // see comments above on clickViewEvent\n  clickEditEvent = (event, identifier) => {\n    console.log(`you clicked the edit event button & ident is: ${identifier}`);\n  }\n\n  // click assign event button \n  clickAssignEvent = () => {\n    // console.log(`you clicked the assign event button, id: ${this.props.event_id} date: ${this.props.eventDate}`);\n    if (typeof this.props.onClickAssign === 'function') {\n      this.props.onClickAssign(this.props.event_id, this.props.eventDate);\n    }\n  }\n\n\n  // click complete event button \n  clickCompleteEvent = () => {\n    // console.log(`you clicked the complete event button, id: ${this.props.event_id} date: ${this.props.eventDate}`);\n    // console.log(`you clicked the complete event button & ident is: ${identifier}`);\n    if (typeof this.props.onClickComplete === 'function') {\n      this.props.onClickComplete(this.props.event_id, this.props.eventDate);\n    }\n  }\n\n  render() {\n    // setting the completed icon class\n    const isCompleted = this.props.iconCompleted\n      ? \"fas fa-check-square fa-lg\" : \"far fa-check-square fa-lg\";\n    // console.log(this.props.iconAssigned);\n\n    // setting the assigned icon class\n    const isAssigned = this.props.iconAssigned\n    ? \"fas fa-user-check fa-lg\" : \"far fa-user fa-lg\" ;\n    // ? \"fas fa-plus-square fa-lg\" : \"far fa-plus-square fa-lg\" ;\n\n    // show hide class\n    // const showhide = this.props.showhideclass;\n    //  ? \"fas fa-plus-square fa-lg\" : \"far fa-plus-square fa-lg\";\n\n    // setting the viewEvent icon class\n    const viewEvent = this.props.iconView\n      ? \"fas fa-info-circle fa-lg\" : \"fas fa-info-circle fa-lg\";\n\n    // setting the editEvent icon class\n    const editEvent = this.props.iconEdit\n      ? \"fas fa-edit fa-lg\" : \"fas fa-edit fa-lg\";\n\n    \n\n    return (\n      // <div className=\"event-div border rounded-sm\">\n      <Row>\n        <Col size=\"md-12\">\n          <div className={`event-div border rounded-sm ${this.props.showhideclass}`}>\n            <div className='row no-gutters'>\n              <Col size=\"6\">\n                <p>{this.props.title}</p>\n              </Col>\n              <Col size=\"3\">\n                <p>{this.props.time}</p>\n              </Col>\n              <Col size=\"3\">\n                <p>{this.props.duration}</p>\n              </Col>\n            </div>\n            <div className='row no-gutters'>\n              <Col size=\"4\">\n                <p> ({this.props.creator})</p>\n              </Col>\n              <Col size=\"4\">\n                <p>{(this.props.assigned) ? `assigned: ${this.props.assigned}` : 'unassigned'}</p>\n              </Col>\n              <Col size=\"1\">\n                <Button icon={viewEvent} clickEvent={this.props.onClickView} clickEventParam={this.props.onClickViewParam} title=\"\"></Button>\n              </Col>\n              <Col size=\"1\">\n                <Button icon={editEvent} clickEvent={this.props.onClickEdit} clickEventParam={this.props.onClickEditParam} title=\"\"></Button>\n              </Col>\n              <Col size=\"1\">\n                <Button icon={isAssigned} clickEvent={this.clickAssignEvent} title=\"\"></Button>\n              </Col>\n              <Col size=\"1\">\n                <Button icon={isCompleted} clickEvent={this.clickCompleteEvent} title=\"\"></Button>\n              </Col>\n            </div>\n          </div>\n        </Col>\n      </Row>\n\n    )\n  }\n}\n\nexport default EventLine;","import React, { Component } from \"react\";\nimport * as firebase from \"firebase\";\nimport \"./style.css\";\n\nclass SideNav extends Component {\n  state = {\n    open: false, // Defaults to closed state\n    navWidth: { width: \"0\" } // Defaults to closed state (open state is 250px)\n  };\n\n  openNav = () => {\n    this.setState({ navWidth: { width: \"250px\" }, open: true });\n  };\n\n  closeNav = () => {\n    this.setState({ navWidth: { width: \"0\" }, open: false });\n  };\n\n  handleLogout = () => {\n\n    // clear session storage\n    sessionStorage.clear();\n\n    // logout of firebase\n    firebase.auth().signOut().then(function() {\n      console.log('signout succesful');\n    }, function(err) {\n      console.log(err);\n    }\n    \n    )}\n\n  render() {\n    return (\n      <div id=\"mySidenav\" className=\"sidenav\" style={this.state.navWidth}>\n        <button className=\"closebtn\" onClick={this.closeNav}>\n          &times; {/* X symbol html code */}\n        </button>\n        <div id=\"filterDivider\">FILTERS</div>\n        <button> <a href='/dashboard'>All Household Events</a> </button>\n        <button> <a href='/dashboard?view=myevents'>My Events</a> </button>\n        <button> <a href='/dashboard?view=assigned'>Assigned To Me</a> </button>\n        <button> <a href='/dashboard?view=unassigned'>Unassigned Events</a> </button>\n        <button onClick={this.handleLogout} className=\"fas fa-arrow-circle-right\" id=\"logoutbutton\"> <a href=\"/\">Logout</a> </button>\n      </div>\n    );\n  }\n}\n\nexport default SideNav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction TopNav(props) {\n  return (\n    <div>\n\n      {/* Bootstrap navbar */}\n      <nav className=\"navbar banner\">\n          \n        {/* Hamburger menue button which activates popout side-nav */}\n        <button className=\"btn navselector\" onClick={props.slideOut}>\n          {/* Font awesome hamburger/bars menue icon */}\n          <i className=\"fas fa-bars \"></i>\n        </button>\n\n        <span className=\"navbar-brand mb-0 h1 housename\">{props.householdName}</span>\n\n        {/* This blank span keeps title centered with current row justifcation settings */}\n        <span></span>\n      </nav>\n    </div>\n  );\n}\n\nexport default TopNav;\n","import React, { Component } from \"react\";\nimport { Form } from 'react-bootstrap';\nimport API from '../../utils/API'\nimport UtilFunc from \"../../components/utilityFunctions\";\n\n\nexport class NewEventTable extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n\n            eventTitle: '',\n            eventType: 'Ride',\n            eventStartTime: '8:45',\n            eventStartTimeSelector: 'AM',\n            eventEndTime: '10:45',\n            eventEndTimeSelector: 'AM',\n            eventDate: '',\n            eventStartLocation: '',\n            eventEndLocation: '',\n            eventDetails: '',\n            startTime: {},\n            endTime: {}\n\n        };\n\n    };\n\n    handleChange = (newDate) => {\n        console.log(\"newDate\", newDate);\n        return this.setState({ date: newDate });\n    }\n\n    handleTypeSelector = event => {\n\n        this.setState({ eventType: event.target.value }, () => {\n\n            console.log(this.state.eventType);\n\n        });\n\n    };\n\n    handleTitleInput = event => {\n\n        this.setState({ eventTitle: event.target.value.trim() }, () => {\n\n            console.log(this.state.eventTitle);\n\n        });\n\n    };\n\n    handleStartTimeInput = event => {\n\n        this.setState({ eventStartTime: event.target.value.trim() }, () => {\n\n            console.log(this.state.eventStartTime);\n\n        });\n\n    };\n\n    handleEndTimeInput = event => {\n\n        this.setState({ eventEndTime: event.target.value.trim() }, () => {\n\n            console.log(this.state.eventEndTime);\n\n        });\n\n    };\n\n\n    handleStartTimeSelector = event => {\n\n        this.setState({ eventStartTimeSelector: event.target.value }, () => {\n\n            console.log(this.state.eventStartTimeSelector)\n\n        });\n\n    };\n\n    handleEndTimeSelector = event => {\n\n        this.setState({ eventEndTimeSelector: event.target.value }, () => {\n\n            console.log(this.state.eventEndTimeSelector);\n\n        });\n\n    };\n\n    handleDateInput = event => {\n\n        this.setState({ eventDate: event.target.value }, () => {\n\n            console.log(this.state.eventDate);\n\n        });\n\n    };\n\n    handleStartLocationInput = event => {\n\n        this.setState({ eventStartLocation: event.target.value }, () => {\n\n            console.log(this.state.eventStartLocation);\n\n        });\n\n    };\n\n    handleEndLocationInput = event => {\n\n        this.setState({ eventEndLocation: event.target.value }, () => {\n\n            console.log(this.state.eventEndLocation);\n\n        });\n\n    };\n\n    handleDetailsInput = event => {\n\n        this.setState({ eventDetails: event.target.value }, () => {\n\n            console.log(this.state.eventDetails);\n\n        });\n\n    };\n\n    validateDateAndTime = async (dateString, startTimeString, endTimeString, startSelector, endSelector) => {\n        if( endSelector === '' || startSelector === '' || startTimeString === '' || endTimeString === ''){\n            return false;\n        }\n        else{\n            //basic checks passed. build the date.\n            //dateParts is now [month, date, year]\n            let dateParts = dateString.split('/');\n            let startDate = new Date(dateParts[2]+'/'+dateParts[0]+'/'+dateParts[1]);\n            if(isNaN(startDate.getDate())){\n                //invalid date\n                return false;\n            }\n            let today = new Date();\n            //date is valid, now we check for logical errors\n            if(startDate <= today){\n                //date is current or in the past\n                return false;\n            }\n            //date is in the future, now validate time\n\n            if(!(startTimeString.match(/^[0-1]?[0-9]:[0-5][0-9]/)) || !(endTimeString.match(/^[0-1]?[0-9]:[0-5][0-9]/))){\n                //invalid start or end times\n                return false;\n            }\n            //basic checks pass\n            let startTimeParts = startTimeString.split(':');\n            let endTimeParts = endTimeString.split(':');\n            let startTimeHH = parseInt(startTimeParts[0]) + ((startSelector == 'PM') ? 12 : 0);\n            let startTimeMM = parseInt(startTimeParts[1]);\n            let endTimeHH = parseInt(endTimeParts[0]) + ((endSelector == 'PM') ? 12 : 0);\n            let endTimeMM = parseInt(endTimeParts[1]);\n\n            let startTime = new Date(dateParts[2], dateParts[0] - 1, dateParts[1], startTimeHH, startTimeMM);\n            let endTime = new Date(dateParts[2], dateParts[0] - 1, dateParts[1], endTimeHH, endTimeMM);\n            console.log(today);\n            console.log(startTime);\n            console.log(endTime);\n            if((endTime > startTime) && (startTime > today)){\n\n                await this.setState({startTime: startTime.toISOString(), endTime: endTime.toISOString()}, () => {\n                    console.log(this.state);\n\n                });\n                return true;\n\n            }else{\n\n                return false;\n\n            }\n        }\n    }\n\n    \n\n\n    handleSubmit = async (event) => {\n\n\n        const currentEvent = this.state;\n\n        let startTimeString = currentEvent.eventStartTime;\n        let startTimeSelector = currentEvent.eventStartTimeSelector;\n        let endTimeString = currentEvent.eventEndTime;\n        let endTimeSelector = currentEvent.eventEndTimeSelector;\n        let dateString = currentEvent.eventDate;\n\n        let timesAreValid = await this.validateDateAndTime(dateString, startTimeString, endTimeString, startTimeSelector, endTimeSelector);\n\n        if (!timesAreValid) {\n\n            alert('enter a valid time');\n\n        } \n        else {\n            var userInfo = UtilFunc.getLocalUserInfo();\n            const creatorId = userInfo.memberId;\n\n            API.createEvent({\n\n            title: this.state.eventTitle,\n            eventType: this.state.eventType.toLowerCase(),\n            location1: this.state.eventStartLocation,\n            location2: this.state.eventEndLocation,\n            startTime: this.state.startTime,\n            endTime: this.state.endTime,\n            note: this.state.eventDetails,\n            creator: creatorId,\n            houseHoldId: this.props.getHouseholdIdFunction()\n\n        });\n\n            this.props.modalClose()\n            window.location.reload(false)\n        }\n\n\n    };\n\n    render() {\n\n\n        const { date, format, mode, inputFormat } = this.state;\n\n        return (\n            <Form>\n                <Form.Group controlId=\"eventTitleInput\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control type=\"input\" placeholder=\"Soccer Practice\" onChange={(e) => this.handleTitleInput(e)} value={this.state.title} />\n                </Form.Group>\n                <Form.Group controlId=\"eventTypeSelector\" >\n                    <Form.Label>Type</Form.Label>\n                    <Form.Control as=\"select\" onChange={(e) => this.handleTypeSelector(e)} value={this.state.eventType}>\n                        <option id='eventTask'>Ride</option>\n                        <option id='eventRide'>Task</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"eventStartTimeInput\">\n                    <Form.Label>Start Time</Form.Label>\n                    <Form.Group className='row'>\n                        <Form.Control type=\"input\" placeholder=\"7:30\" className='col-5' onChange={(e) => this.handleStartTimeInput(e)} value={this.state.eventStartTime} />\n                        <Form.Control as=\"select\" className='col-5' onChange={(e) => this.handleStartTimeSelector(e)} value={this.state.eventStartTimeSelector}>\n                            <option id='timeAM'>AM</option>\n                            <option id='timePM'>PM</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Group>\n                <Form.Group controlId=\"eventEndTimeInput\">\n                    <Form.Label>End Time</Form.Label>\n                    <Form.Group className='row'>\n                        <Form.Control type=\"input\" placeholder=\"7:30\" className='col-5' onChange={(e) => this.handleEndTimeInput(e)} value={this.state.eventEndTime} />\n                        <Form.Control as=\"select\" className='col-5' onChange={(e) => this.handleEndTimeSelector(e)} value={this.state.eventEndTimeSelector}>\n                            <option id='timeAM'>AM</option>\n                            <option id='timePM'>PM</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Group>\n                <Form.Group controlId=\"eventDateInput\">\n                    <Form.Label>Date</Form.Label>\n                    <Form.Control type=\"input\" placeholder=\"11/11/2019\" onChange={(e) => this.handleDateInput(e)} value={this.state.eventDate} />\n                </Form.Group>\n                <Form.Group controlId=\"eventStartLocationInput\">\n                    <Form.Label>Start Location</Form.Label>\n                    <Form.Control type=\"input\" placeholder=\"Seattle, WA\" onChange={(e) => this.handleStartLocationInput(e)} value={this.state.eventStartLocation} />\n                </Form.Group>\n                <Form.Group controlId=\"eventEndLocationInput\">\n                    <Form.Label>End Location</Form.Label>\n                    <Form.Control type=\"input\" placeholder=\"Everett, WA\" onChange={(e) => this.handleEndLocationInput(e)} value={this.state.eventEndLocation} />\n                </Form.Group>\n                <Form.Group controlId=\"eventDetailsInput\">\n                    <Form.Label>Details</Form.Label>\n                    <Form.Control as=\"textarea\" rows=\"3\" placeholder='We are picking up Amy on the way to practice!' onChange={(e) => this.handleDetailsInput(e)} value={this.state.eventDetails} />\n                </Form.Group>\n\n                <button className='btn btn-default' onClick={(e) => this.handleSubmit(e)}>Submit</button>\n\n                <button className='btn btn-default' data-dismiss=\"modal\" onClick={(e) => this.props.modalClose(e)} >Cancel</button>\n\n            </Form>\n        );\n    }\n}\n\nexport default NewEventTable;","import React, { Component } from \"react\";\nimport { Form } from 'react-bootstrap';\nimport { Container, Row, Col } from '../Grid/index';\nimport API from '../../utils/API'\nimport UtilFunc from \"../../components/utilityFunctions\";\n\n\nexport class EditEvent extends Component {\n\n    constructor(props) {\n\n        super(props);\n        let startTimeArr = this.ConvertTime(props.event.startTime);\n        let endTimeArr = this.ConvertTime(props.event.endTime);\n        this.state = {\n            eventId: props.event.event_id,\n            eventTitle: props.event.title.trim(),\n            eventType: this.AddEventType(props.event.eventType),\n            eventStartTime: startTimeArr[0],\n            eventStartTimeSelector: startTimeArr[1],\n            eventEndTime: endTimeArr[0],\n            eventEndTimeSelector: endTimeArr[1],\n            eventDate: this.ConvertDate(props.event.startTime),\n            eventStartLocation: props.event.location1,\n            eventEndLocation: props.event.location2,\n            eventDetails: props.event.note,\n            startTime: {},\n            endTime: {},\n\n        };\n\n    };\n\n    AddEventType(str){\n\n        if (str === 'ride') {\n            return 'Ride';\n\n        } else if (str === 'task') {\n            return 'Task';\n\n        }\n\n\n    }\n\n    ConvertTime(str){\n        let time = new Date(str);\n        let newTime = time.toLocaleTimeString('en-US', { timeStyle: 'short' });\n        let amPmStr = newTime.includes('AM') ? 'AM' : 'PM';\n        newTime = newTime.replace(/[AP]M/, '').trim();\n        return [newTime, amPmStr];\n    }\n\n    ConvertDate(str) {\n        let date = new Date(str);\n        let newDate = date.toLocaleDateString('en-US', { day: '2-digit', month: '2-digit',year: 'numeric' });\n        return newDate;\n    }\n\n\n    handleTypeSelector = event => {\n\n        this.setState({ eventType: event.target.value }, () => {\n\n            console.log(this.state.eventType);\n\n        });\n\n    };\n\n    handleTitleInput = event => {\n\n        this.setState({ eventTitle: event.target.value }, () => {\n\n            console.log(this.state.eventTitle);\n\n        });\n\n    };\n\n    handleStartTimeInput = event => {\n\n        this.setState({ eventStartTime: event.target.value.trim() }, () => {\n\n            console.log(this.state.eventStartTime);\n\n        });\n\n    };\n\n    handleEndTimeInput = event => {\n\n        this.setState({ eventEndTime: event.target.value.trim() }, () => {\n\n            console.log(this.state.eventEndTime);\n\n        });\n\n    };\n\n\n    handleStartTimeSelector = event => {\n\n        this.setState({ eventStartTimeSelector: event.target.value }, () => {\n\n            console.log(this.state.eventStartTimeSelector)\n\n        });\n\n    };\n\n    handleEndTimeSelector = event => {\n\n        this.setState({ eventEndTimeSelector: event.target.value }, () => {\n\n            console.log(this.state.eventEndTimeSelector);\n\n        });\n\n    };\n\n    handleDateInput = event => {\n\n        this.setState({ eventDate: event.target.value }, () => {\n\n            console.log(this.state.eventDate);\n\n        });\n\n    };\n\n    handleStartLocationInput = event => {\n\n        this.setState({ eventStartLocation: event.target.value }, () => {\n\n            console.log(this.state.eventStartLocation);\n\n        });\n\n    };\n\n    handleEndLocationInput = event => {\n\n        this.setState({ eventEndLocation: event.target.value }, () => {\n\n            console.log(this.state.eventEndLocation);\n\n        });\n\n    };\n\n    handleDetailsInput = event => {\n\n        this.setState({ eventDetails: event.target.value }, () => {\n\n            console.log(this.state.eventDetails);\n\n        });\n\n    };\n\n    validateDateAndTime = async (dateString, startTimeString, endTimeString, startTimeSelector, endTimeSelector) => {\n        if (endTimeSelector === '' || startTimeSelector === '' || startTimeString === '' || endTimeString === '') {\n            console.log(dateString, startTimeString, endTimeString);\n            alert('false 1');\n           return false;\n        }\n        else {\n            //basic checks passed. build the date.\n            //dateParts is now [month, date, year]\n            let dateParts = dateString.split('/');\n            let startDate = new Date(dateParts[2] + '/' + dateParts[0] + '/' + dateParts[1]);\n            if (isNaN(startDate.getDate())) {\n                //invalid date\n                alert('false 2');\n                return false;\n            }\n            let today = new Date();\n            //date is valid, now we check for logical errors\n            if (startDate <= today) {\n                //date is current or in the past\n                alert('false 3');\n                return false;\n            }\n            //date is in the future, now validate time\n            if (!(startTimeString.match(/^[0-1]?[0-9]:[0-5][0-9]/)) || !(endTimeString.match(/^[0-1]?[0-9]:[0-5][0-9]/))) {\n                //invalid start or end times\n                alert('false 4');\n                return false;\n            }\n            //basic checks pass\n            let startTimeParts = startTimeString.split(':');\n            let endTimeParts = endTimeString.split(':');\n            let startTimeHH = parseInt(startTimeParts[0]) + ((startTimeSelector === 'PM') ? 12 : 0);\n            let startTimeMM = parseInt(startTimeParts[1]);\n            let endTimeHH = parseInt(endTimeParts[0]) + ((endTimeSelector === 'PM') ? 12 : 0);\n            let endTimeMM = parseInt(endTimeParts[1]);\n\n            let startTime = new Date(dateParts[2], dateParts[0] - 1, dateParts[1], startTimeHH, startTimeMM);\n            let endTime = new Date(dateParts[2], dateParts[0] - 1, dateParts[1], endTimeHH, endTimeMM);\n\n    \n    \n    \n            if ((endTime > startTime) && (startTime > today)) {\n\n                await this.setState({ startTime: startTime.toISOString(), endTime: endTime.toISOString() }, () => {\n\n                });\n                return true;\n\n            } else {\n                alert('false 5');\n                return false;\n\n            }\n        }\n    }\n\n\n\n\n    handleSubmit = async (event) => {\n\n\n        const currentEvent = this.state;\n\n        let startTimeString = currentEvent.eventStartTime;\n        let startTimeSelector = currentEvent.eventStartTimeSelector;\n        let endTimeString = currentEvent.eventEndTime;\n        let endTimeSelector = currentEvent.eventEndTimeSelector;\n        let dateString = currentEvent.eventDate;\n\n        console.log(dateString, startTimeString, endTimeString, startTimeSelector, endTimeSelector);\n        let timesAreValid = await this.validateDateAndTime(dateString, startTimeString, endTimeString, startTimeSelector, endTimeSelector);\n        \n        if (!timesAreValid) {\n\n            alert('enter a valid time not at all');\n\n        }\n        else {\n\n            var userInfo = UtilFunc.getLocalUserInfo();\n            const creatorId = userInfo.memberId;\n            API.updateEvent(this.state.eventId,{\n\n                title: this.state.eventTitle,\n                eventType: this.state.eventType.toLowerCase(),\n                location1: this.state.eventStartLocation,\n                location2: this.state.eventEndLocation,\n                startTime: this.state.startTime,\n                endTime: this.state.endTime,\n                note: this.state.eventDetails,\n                creator: creatorId,\n                houseHoldId: this.props.getHouseholdIdFunction()\n\n            });\n\n            this.props.modalClose()\n\n            window.location.reload(false)\n        }   \n\n\n    };\n\n\n    render() {\n\n        return (\n            <Container>\n                <Form.Group controlId=\"eventTitleInput\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control type=\"input\" onChange={(e) => this.handleTitleInput(e)} value={this.state.eventTitle} />\n                </Form.Group>\n                <Form.Group controlId=\"eventTypeSelector\" >\n                    <Form.Label>Type</Form.Label>\n                    <Form.Control as=\"select\" onChange={(e) => this.handleTypeSelector(e)} value={this.state.eventType}>\n                        <option id='eventTask'>Ride</option>\n                        <option id='eventRide'>Task</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"eventStartTimeInput\">\n                    <Form.Label>Start Time</Form.Label>\n                    <Form.Group className='row'>\n                        <Form.Control type=\"input\" className='col-5' onChange={(e) => this.handleStartTimeInput(e)} value={this.state.eventStartTime} />\n                        <Form.Control as=\"select\" className='col-5' onChange={(e) => this.handleStartTimeSelector(e)} value={this.state.eventStartTimeSelector}>\n                            <option id='timeAM'>AM</option>\n                            <option id='timePM'>PM</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Group>\n                <Form.Group controlId=\"eventEndTimeInput\">\n                    <Form.Label>End Time</Form.Label>\n                    <Form.Group className='row'>\n                        <Form.Control type=\"input\" className='col-5' onChange={(e) => this.handleEndTimeInput(e)} value={this.state.eventEndTime} />\n                        <Form.Control as=\"select\" className='col-5' onChange={(e) => this.handleEndTimeSelector(e)} value={this.state.eventEndTimeSelector}>\n                            <option id='timeAM'>AM</option>\n                            <option id='timePM'>PM</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Group>\n                <Form.Group controlId=\"eventDateInput\">\n                    <Form.Label>Date</Form.Label>\n                    <Form.Control type=\"input\" onChange={(e) => this.handleDateInput(e)} value={this.state.eventDate} />\n                </Form.Group>\n                <Form.Group controlId=\"eventStartLocationInput\">\n                    <Form.Label>Start Location</Form.Label>\n                    <Form.Control type=\"input\" onChange={(e) => this.handleStartLocationInput(e)} value={this.state.eventStartLocation} />\n                </Form.Group>\n                <Form.Group controlId=\"eventEndLocationInput\">\n                    <Form.Label>End Location</Form.Label>\n                    <Form.Control type=\"input\" onChange={(e) => this.handleEndLocationInput(e)} value={this.state.eventEndLocation} />\n                </Form.Group>\n                <Form.Group controlId=\"eventDetailsInput\">\n                    <Form.Label>Details</Form.Label>\n                    <Form.Control as=\"textarea\" rows=\"3\" onChange={(e) => this.handleDetailsInput(e)} value={this.state.eventDetails} />\n                </Form.Group>\n\n                <button className='btn btn-default' onClick={(e) => this.handleSubmit(e)}>Submit</button>\n\n                <button className='btn btn-default' data-dismiss=\"modal\" onClick={(e) => this.props.modalClose(e)}>Cancel</button>\n            </Container>\n        );\n    }\n}\n\nexport default EditEvent;","import React, { Component, useState } from \"react\";\nimport { Container, Row, Col } from '../Grid/index';\n// import API from '../../utils/API'\n\n\nexport class ViewEvent extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            \n            eventDate: '',\n            eventStartLocation: props.event.location1,\n            eventEndLocation: props.event.location2,\n            eventDetails: '',\n            mode: 'hide',\n            \n        };\n\n    };\n\n\n\n    Capitalize(str){\n        console.log(this.state.eventStartLocation)\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    ConvertTime(str){\n        let time = new Date(str);\n        let newTime = time.toLocaleTimeString('en-US',{timeStyle: 'short'}) ;\n        console.log(time);\n        return newTime;\n    }\n\n    ConvertDate(str){\n        let date = new Date(str);\n        let newDate = date.toLocaleDateString('en-US', { day: '2-digit', month: '2-digit',year: 'numeric' });\n        console.log(newDate);\n        return newDate;\n    }\n\n    SetToHide(str){\n\n        if(str === this.state.location1){\n\n            return '';\n\n        }else{\n\n            return 'Start Location: ';\n        }\n\n    }\n\n\n    renderInputField() {\n\n        if(this.state.mode === '') {\n            \n          return ;\n        } else if(this.state.mode === 'Location: '){\n\n          return;\n        }\n      }\n\n    render() {\n\n        const data= this.props.event;\n        return (\n            <Container>\n                <Row>\n                    <Col size='10'>\n                        <h4>{this.Capitalize(data.eventType)}</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col size='10'>\n                        <h4>Start Time:</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col size='10'>\n                        <h4>{this.ConvertTime(data.startTime)}</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col size='10'>\n                        <h4>End Time:</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col size='10'>\n                        <h4>{this.ConvertTime(data.endTime)}</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col size='10'>\n                        <h4>Date:</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col size='10'>\n                        <h4>{this.ConvertDate(data.startTime)}</h4>\n                    </Col>\n                </Row>\n\n                {data.location1 ? <Row><Col size='10'><h4>Start Location: {data.location1}</h4></Col></Row> : ''}\n\n                {data.location2 ? <Row><Col size='10'><h4>End Location: {data.location2}</h4></Col></Row> : ''}\n\n                {data.note ? <Row><Col size='10'><h4>Notes: {data.note}</h4></Col></Row> : ''}\n\n            </Container>\n        );\n    }\n}\n\nexport default ViewEvent;","import React, { Component } from \"react\";\nimport { Modal } from 'react-bootstrap';\nimport NewEventTable from '../NewEventForm/newEventTable';\nimport EditEvent from '../EditEvent/index';\nimport ViewEvent from '../ViewEvent/index';\nimport \"./style.css\";\n\n\n\nexport class ModalCardBody extends Component {\n\n  constructor() {\n\n    super();\n\n    this.state = {\n\n      showModal: false,\n      modalType: 'NewEventTable',\n      event: {}\n\n    };\n\n  };\n  \n  toggleModal = () => {\n\n    this.setState({ showModal: !(this.state.showModal) });\n    console.log(this.state.showModal);\n    console.log('here for it');\n\n  };\n\n  render() {\n\n    if(this.state.modalType === 'NewEventTable'){\n\n    return (\n\n       <div>\n        <Modal show={this.state.showModal} onHide={this.toggleModal}>\n          <Modal.Header closeButton>\n            <Modal.Title id='.'>{this.props.title} Create New Event</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <NewEventTable getHouseholdIdFunction={this.props.getHouseholdIdFunction} modalClose={this.toggleModal}/>\n          </Modal.Body>\n        </Modal>\n      </div>\n\n    )}\n    else if(this.state.modalType === 'ViewEvent'){\n      return (\n        <div>\n        <Modal show={this.state.showModal} onHide={this.toggleModal}>\n          <Modal.Header closeButton>\n            <Modal.Title id='.'>{this.state.event.title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <ViewEvent event={this.state.event}/>\n          </Modal.Body>\n        </Modal>\n      </div>\n      )\n    }\n    else if(this.state.modalType === 'EditEvent'){\n      return (\n        <div>\n        <Modal show={this.state.showModal} onHide={this.toggleModal}>\n          <Modal.Header closeButton>\n          <Modal.Title id='.'>{this.state.event.title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <EditEvent event={this.state.event} getHouseholdIdFunction={this.props.getHouseholdIdFunction} modalClose={this.toggleModal}/>\n          </Modal.Body>\n        </Modal>\n      </div>\n      )}\n  }\n}\n\nexport default ModalCardBody;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { Container, Row, Col } from \"../components/Grid/index\";\nimport DashCard from \"../components/DashCard\";\nimport Button from \"../components/Button\";\nimport EventLine from \"../components/EventLine\";\nimport SideNav from \"../components/SideNav\";\nimport TopNav from \"../components/TopNav\";\nimport UtilFunc from \"../components/utilityFunctions\";\nimport ModalCardBody from \"../components/Modal/modalBody\"\nimport \"./style/Dashboard.css\";\n\n\n// mock up date for early testing prior to API route availability \n// const eventData = [\n// { date: \"Monday 11/18/2019\",\n//   events: [{event_id: '1', status: \"closed\", title: \"Ride to Practice\", eventType: \"ride\",  time: \"9:00 AM\", creator: \"Rory\", assigned: \"Myles\", location1: 'Mukilteo, WA', location2: 'Snoqualmie, WA', note: 'Picking up the carpool on the way', startTime: '4:47', endTime: '2:27'},\n//           {event_id: '2', status: \"closed\", title: \"Pick up from work\", eventType: \"ride\", time: \"9:00 AM\", creator: \"Rory\", assigned: \"Myles\", location1: 'Everett, WA', location2: 'Home', note: \"Don't forget you need to be there early to find parking\"},\n//           {event_id: '3', status: \"closed\", title: \"Sign permission slip\", eventType: \"task\", time: \"\", creator: \"Kyra\", assigned: \"Sean\", location1: 'Home', location2: '', note: 'Please include money for lunch'},\n//           {event_id: '4', status: \"closed\", title: \"Pick up from Jane's\", eventType: \"ride\", time: \"8:00PM\", creator: \"Rory\", assigned: \"Myles\", location1: \"Jane's House\", location2: 'Home', note: ''}]},\n//   {date: \"Wednesday 11/20/2019\",\n//   events: [{event_id: '5', status: \"open\", title: \"Pick up dinner\", eventType: \"task\", time: \"5:00 PM\", creator: \"Sean\", assigned: \"Myles\"}]},\n//   {date: \"Thursday 11/21/2019\",\n//   events: [{event_id: '6', status: \"open\", title: \"Drop off at meet\", eventType: \"ride\", time: \"4:00 PM\", creator: \"Rory\", assigned: \"\"},\n//           {event_id: '7', status: \"open\", title: \"Pick up from meet\", eventType: \"ride\", time: \"9:00 PM\", creator: \"Rory\", assigned: \"\"}]}\n// ]\n\n\n// Define state for Dashboard object\nclass Dashboard extends Component {\n  state = {\n    householdName: \"No current household\", // HouseholdName defaults to an error and should be updated when loading other household info\n    householdId: \"\",\n    //events: eventData\n    events: [],\n    userId: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    viewType: \"\" // page view type\n  };\n\n  // Attaching ref to SideNav so that we can access its internal state\n  // We can now access functions from SideNav using: this.SideNav.current.someFunction()\n  sidenavRef = React.createRef();\n\n  //Attaching modal ref\n  modalRef = React.createRef();\n\n  // Function for closing the side nav panel. Only does anything if the nav is currently open\n  closeNav = () => {\n    if (this.sidenavRef.current.state.open) {\n      this.sidenavRef.current.closeNav();\n    }\n  };\n\n  openNav = () => {\n    this.sidenavRef.current.openNav();\n  };\n\n\n  // click add event button - botton for dashboard\n  // if this is clicked then the edit event modal needs to be\n  // shown and if it is not cancelled out then its new event\n  // entry will need to be updated in database and this \n  // page will need to be re-rendered since the event could have\n  // been added for any existing date or a new date\n  clickAddEvent = () => {\n    this.modalRef.current.setState({modalType: 'NewEventTable'}, () => {\n      this.modalRef.current.toggleModal();\n    });\n    console.log(`you clicked the add event button`);\n  }\n\n\n  clickViewEvent = (clickEvent, identifier, viewedEvent) => {\n\n    this.modalRef.current.setState({modalType: 'ViewEvent', event: viewedEvent}, () => {\n\n      this.modalRef.current.toggleModal();\n  });\n    console.log(`you clicked the view event button`);\n    console.log(viewedEvent);\n  }\n\n  clickEditEvent = (clickEvent, identifier, viewedEvent) => {\n\n    this.modalRef.current.setState({modalType: 'EditEvent', event: viewedEvent}, () => {\n\n      this.modalRef.current.toggleModal();\n  });\n    console.log(`you clicked the edit event button`);\n    console.log(viewedEvent);\n  }\n\n  getHouseholdId = () => {\n    return this.state.householdId;\n  }\n\n  // When the component mounts, get a list of all events\n  componentDidMount() {\n      // get user info from session storage\n      var userInfo = UtilFunc.getLocalUserInfo();\n      //console.log(`userInfo: ${JSON.stringify(userInfo)}`);\n\n       // console.log(`User Id from Session Storage: ${userInfo.memberId}`);\n       // console.log(`Household Id from Session Storage: ${userInfo.currentHouseholdId}`)  \n       this.setState({userId: userInfo.memberId}); \n       this.setState({householdId: userInfo.currentHouseholdId}); \n\n       // get the user so we can have the first and last name from the account information\n       API.getMember(userInfo.memberId)\n       .then(res => {\n         // console.log(`Member Lookup: ${res.data[0].firstName}`)\n         // capture the user account first & last names\n         this.setState({firstName: res.data[0].firstName}); \n         this.setState({lastName: res.data[0].lastName}); \n       })\n       .catch(err => console.log(err));\n\n       // get the household so we can have the household name on Nav Bar\n       API.getHousehold(userInfo.currentHouseholdId)\n       .then(res => {\n         // console.log(`Member Lookup: ${res.data[0].firstName}`)\n         // capture the user account first & last names\n         this.setState({householdName: res.data[0].name}); \n       })\n       .catch(err => console.log(err));\n\n       //get the raw parameters submitted. eg. this will be \"?view=assigned\"\n       let queryStringParams = this.props.location.search;\n       //get only the \"view=[something] part\" by matching it with a regex\n       let viewParam = queryStringParams.match(/view=[a-zA-Z]+/);\n       //viewParam contains an array with all matches\n       //Only one match in our case, so it'll look like:\n       //[\"view=assigned\"] or [\"view=unclaimed\"]\n       //viewParam will be null if no matches are found\n       if(viewParam){\n         //We found a view parameter, get its value\n         // on split, \"view=assigned\" becomes:\n         //[\"view\",\"assigned\"] \n         viewParam = viewParam[0].split('=')[1];\n\n         // save view type in state\n         this.setState({viewType: viewParam});\n\n         // evaluate which view is being rendered\n         if(viewParam === 'myevents'){\n           //API call for the events the user has created\n           const type = \"current-user\"\n           API.getHouseholdEvents(userInfo.currentHouseholdId,userInfo.memberId,type)\n              .then(res => {\n                // if no data retrieved return empty error for dashboard map render\n                if (res.data[0].hasOwnProperty(\"events\")) {\n                  this.setState({ events: res.data })\n                } else {\n                  this.setState({ events: [] })\n                }\n              })\n              .catch(err => console.log(err));\n         }else if(viewParam === 'unassigned'){\n           //API call for unclaimed events\n           const type = \"unassigned\";\n           API.getHouseholdEvents(userInfo.currentHouseholdId,userInfo.memberId,type)\n              .then(res => {\n                // if no data retrieved return empty error for dashboard map render\n                if (res.data[0].hasOwnProperty(\"events\")) {\n                  this.setState({ events: res.data })\n                } else {\n                  this.setState({ events: [] })\n                }\n              })\n              .catch(err => console.log(err));\n         }else if(viewParam === 'assigned'){\n          //API call for events assigned to the current user\n          const type = \"assigned\";\n          API.getHouseholdEvents(userInfo.currentHouseholdId,userInfo.memberId,type)\n             .then(res => {\n               // if no data retrieved return empty error for dashboard map render\n               if (res.data[0].hasOwnProperty(\"events\")) {\n                 this.setState({ events: res.data })\n               } else {\n                 this.setState({ events: [] })\n               }\n             })\n             .catch(err => console.log(err));\n          }else{\n           //something that doesn't make sense. Default Dashboard.\n           const type = \"all\";\n           this.setState({viewType: \"all\"});\n           API.getHouseholdEvents(userInfo.currentHouseholdId,userInfo.memberId,type)\n              .then(res => {\n                // reformat response data if empty into empty array\n                if (res.data[0].hasOwnProperty(\"events\")) {\n                    this.setState({ events: res.data })\n                } else {\n                  this.setState({ events: [] })\n                }\n              })\n              .catch(err => console.log(err));\n         }\n       }else{\n         //We didn't find a view parameter, show the default dashboard\n        //  console.log(\"No parameter. Default dashboard.\");\n         this.setState({viewType: \"all\"});\n         const type = \"all\";\n         API.getHouseholdEvents(userInfo.currentHouseholdId,userInfo.memberId,type)\n            .then(res => {\n                // reformat response data if empty into empty array\n                if (res.data[0].hasOwnProperty(\"events\")) {\n                  this.setState({ events: res.data })\n                } else {\n                  this.setState({ events: [] })\n                };\n            })\n            .catch(err => console.log(err));\n       }\n  }\n\n  // manage the show more show less chevron button (appears if > 3 events for date)\n  showHideChange = (toggleAction, eventDate) => { \n    // console.log(`In showHidChange EventDate: ${eventDate} toggleAction: ${toggleAction}`);\n    const newEvents = [...this.state.events];\n    const dateIndex = newEvents.findIndex(event => event.date === eventDate);\n    const newShowHideClass = (toggleAction === 'show') ? 'show-event' : 'hide-event';\n    // adjusting 4th and greater events for date to either show or hide them\n    newEvents[dateIndex].events.map((event,i) => {\n      // console.log(`Event is: ${i} event details: ${JSON.stringify(event)}`)\n      if (i > 2 ) {\n        // console.log(`this is: ${i} event id is ${event.event_id}`)\n        const itemIndex = newEvents[dateIndex].events.findIndex(dateEvent => dateEvent.event_id === event.event_id);\n        // console.log(`dateIndex: ${dateIndex} item index: ${itemIndex}`)\n        newEvents[dateIndex].events[itemIndex].showhideclass = newShowHideClass;  // assigned the toggled showhideclass\n      };\n      this.setState({events: newEvents});\n    })\n  };\n\n  // manage the assign event to self button - either assigning to self or removing from self\n  modifyEventAssign = (eventId, eventDate) => {\n    const newEvents = [...this.state.events];\n    const dateIndex = newEvents.findIndex(event => event.date === eventDate);\n    const itemIndex = newEvents[dateIndex].events.findIndex(event => event.event_id === eventId);\n    // console.log(`assign click: ${newEvents[dateIndex].events[itemIndex].assigned }`)\n\n    // // if Event is assigned then toggle it to unassigned\n    // if (newEvents[dateIndex].events[itemIndex].assigned) {\n    //   // console.log(`was assigned`)\n    //   newEvents[dateIndex].events[itemIndex].assigned = undefined;   // name\n    //   newEvents[dateIndex].events[itemIndex].assigned_id = undefined;  // member id\n    //   newEvents[dateIndex].events[itemIndex].assignedStatus = 'unassigned';  // assigned status\n\n    //   // console.log(`event: ${newEvents[dateIndex].events[itemIndex].title} \n    //   //              event id: ${newEvents[dateIndex].events[itemIndex].event_id} \n    //   //              user: ${newEvents[dateIndex].events[itemIndex].assigned}\n    //   //             user_id: ${newEvents[dateIndex].events[itemIndex].assigned_id}`)\n    //   this.setState({events: newEvents});\n\n    //   // update database to remove assignee and set event assigned status to unassigned\n    //   const id = newEvents[dateIndex].events[itemIndex].event_id;\n    //   const eventData = {$set: {assignedStatus: \"unassigned\"}, $unset: {assignee: 1}}\n    //   API.updateEvent(id,eventData)\n    //     .then(res => console.log(res))\n    //     .catch(err => console.log(err)); \n    // } \n\n    // if Event is assigned then toggle it to unassigned\n    if (newEvents[dateIndex].events[itemIndex].assigned) {\n      // console.log(`was assigned`)\n      newEvents[dateIndex].events[itemIndex].assigned = undefined;   // name\n      newEvents[dateIndex].events[itemIndex].assigned_id = undefined;  // member id\n      newEvents[dateIndex].events[itemIndex].assignedStatus = 'unassigned';  // assigned status\n\n      // capture Event id before possible splice out of the events array (if on assigned Events view)\n      const id = newEvents[dateIndex].events[itemIndex].event_id;\n\n      // console.log(`event: ${newEvents[dateIndex].events[itemIndex].title} \n      //              event id: ${newEvents[dateIndex].events[itemIndex].event_id} \n      //              user: ${newEvents[dateIndex].events[itemIndex].assigned}\n      //             user_id: ${newEvents[dateIndex].events[itemIndex].assigned_id}`)\n\n      if (this.state.viewType === \"assigned\") {\n        // console.log(`unassigning an event on the assigned view`)\n\n        // // show content of events array\n        // newEvents[dateIndex].events.map((event,idx) => { \n        //   console.log(`row: ${idx} ${event.showhideclass}  ${event.title} `)\n        // });\n\n        // splice out the event from state\n        newEvents[dateIndex].events.splice(itemIndex,1);\n\n        // if there are >= 4 rows left & 4th row is hidden then show it to make up\n        // for the removal of a row before it\n        //console.log(`length: ${newEvents[dateIndex].events.length}`);\n        \n        // if last event was spliced out then splice out the date header itself\n        if (newEvents[dateIndex].events.length === 0) {\n          newEvents.splice(dateIndex,1);\n        } // reveil the next up event if it is hidden\n          else if (newEvents[dateIndex].events.length >= 3 && \n          newEvents[dateIndex].events[2].showhideclass === 'hide-event') {\n            newEvents[dateIndex].events[2].showhideclass = 'show-event'\n          };\n      } \n\n      // re-render the dom after resetting the state to the reflect \n      // changes in the event assignements\n      this.setState({events: newEvents});\n\n\n      // update database to remove assignee and set event assigned status to unassigned\n      const eventData = {$set: {assignedStatus: \"unassigned\"}, $unset: {assignee: 1}}\n      API.updateEvent(id,eventData)\n        .then(res => console.log(res))\n        .catch(err => console.log(err)); \n    } \n      // Event was unassigned - now assign it\n      else {\n      // console.log(`State of Member: ${this.state.firstName} ${this.state.lastName} ${this.state.userId}`);\n      newEvents[dateIndex].events[itemIndex].assigned = this.state.firstName // 'current user';  // name\n      newEvents[dateIndex].events[itemIndex].assigned_id = this.state.userId // 'current userId';  // member id\n      newEvents[dateIndex].events[itemIndex].assignedStatus = 'claimed';  // assigned status\n\n      // capture Event id before possible splice out of the events array (if on unassigned Events view)\n      const id = newEvents[dateIndex].events[itemIndex].event_id;\n\n      if (this.state.viewType === \"unassigned\") {\n        // console.log(`assigning an event on the Unassigned view`)\n\n        // // show content of events array\n        // newEvents[dateIndex].events.map((event,idx) => { \n        //   console.log(`row: ${idx} ${event.showhideclass}  ${event.title} `)\n        // });\n\n        // splice out the event from state\n        newEvents[dateIndex].events.splice(itemIndex,1);\n\n        // if there are >= 4 rows left & 4th row is hidden then show it to make up\n        // for the removal of a row before it\n        //console.log(`length: ${newEvents[dateIndex].events.length}`);\n        \n        // if last event was spliced out then splice out the date header itself\n        if (newEvents[dateIndex].events.length === 0) {\n          newEvents.splice(dateIndex,1);\n        } // reveil the next up event if it is hidden\n          else if (newEvents[dateIndex].events.length >= 3 && \n          newEvents[dateIndex].events[2].showhideclass === 'hide-event') {\n            newEvents[dateIndex].events[2].showhideclass = 'show-event'\n          };\n      } \n      // re-render the dom after resetting the state to the reflect \n      // changes in the event assignements\n      this.setState({events: newEvents});\n\n      // update database to add assignee and set event assigned status to claimed\n      const eventData = {assignee: this.state.userId, assignedStatus: \"claimed\"}\n      API.updateEvent(id,eventData)\n      .then(res => console.log(res))\n      .catch(err => console.log(err))\n    };\n  }\n\n  // manage the event status button - either marking as closed or open\n  modifyEventStatus = (eventId, eventDate) => {\n    const newEvents = [...this.state.events];\n    const dateIndex = newEvents.findIndex(event => event.date === eventDate);\n    const itemIndex = newEvents[dateIndex].events.findIndex(event => event.event_id === eventId);\n    newEvents[dateIndex].events[itemIndex].status = newEvents[dateIndex].events[itemIndex].status === 'closed' ? 'open' : 'closed';\n    // console.log(`event: ${newEvents[dateIndex].events[itemIndex].title}    \n    //              event id: ${newEvents[dateIndex].events[itemIndex].event_id}\n    //              status: ${newEvents[dateIndex].events[itemIndex].status}`)\n    this.setState({events: newEvents});\n\n    // update the database to set event to open or closed\n    const id = newEvents[dateIndex].events[itemIndex].event_id;\n    const eventData = {status: newEvents[dateIndex].events[itemIndex].status}\n    API.updateEvent(id,eventData)\n      .then(res => console.log(res))\n      .catch(err => console.log(err))\n  }\n\n  // render the Dashboard Component\n  render() {\n    return (\n      <section>\n        <SideNav ref={this.sidenavRef} />\n        {/* The below div exists purely to allow clicking off of the side-nav to close it. Putting that functionality into Container did not work. */}\n        <div onClick={this.closeNav}>\n          <TopNav \n          slideOut={this.openNav}\n          // householdName={this.state.householdName}\n          householdName={(this.state.viewType === \"all\") ? `${this.state.householdName} - All Events`\n                          : ((this.state.viewType === \"myevents\") ? `My Events - ${this.state.firstName}` \n                          : ((this.state.viewType === \"assigned\") ? `Events Assigned to ${this.state.firstName}`\n                          : `${this.state.householdName} - Unassigned Events`))}\n          />\n          <Container>\n            <Row>\n              <Col size=\"md-12 fluid\">\n                {  \n                  // render if dates & event exist else render 'No Event' text - see end of ternary\n                  (this.state.events.length > 0) ?\n                  this.state.events.map((eventDate,i) => {\n                    // console.log(`EVENT: ${JSON.stringify(eventDate.date)}`)\n                    return (\n                      <div className=\"date-card-div\">\n                      <DashCard\n                      key={eventDate.date}\n                      icon=\"fa fa-calendar-alt\"\n                      title={eventDate.date}\n                      id={(eventDate.events.length > 3) ? \"show-more\" : undefined }\n                      showmoreIcon={(eventDate.events.length > 3) ? \"fas fa-angle-double-down fa-lg\" : \"\" }\n                      events={eventDate.events}\n                      eventDate={eventDate.date}\n                      firstdashcard={(i === 0) ? \"first-dashcard\" : \"\"}\n                      onClickShowHide={this.showHideChange}\n                     ></DashCard>\n                      {\n                        eventDate.events.map((event,i) => {\n                          // console.log(`assigned: ${event.assigned} assigned_id: ${event.assigned_id} status: ${event.status} `)\n                          // console.log(`EVENT: ${JSON.stringify(event)}`)\n                          return (\n                            <EventLine\n                            key={event.event_id}\n                            showhideclass={event.showhideclass}\n                            event_id={event.event_id}\n                            title={event.title}\n                            eventType={event.eventType}\n                            status={event.status}\n                            location1={event.location1}\n                            location2={event.location2}\n                            time={(event.time) ? event.time : undefined}\n                            startTime={event.startTime}\n                            endTime={event.endTime}\n                            duration=\"\"\n                            creator_id={event.creator_id}\n                            creator={event.creator}\n                            assigned_id={(event.assigned_id) ? event.assigned_id : undefined}\n                            assigned={(event.assigned) ? event.assigned : undefined}\n                            iconView={event.event_id}\n                            onClickView={this.clickViewEvent}\n                            onClickViewParam={event}\n                            iconEdit={event.event_id}\n                            onClickEdit={this.clickEditEvent}\n                            onClickEditParam={event}\n                            // iconAssigned={(event.assigned) ? \"fas fa-plus-square fa-lg\" : \"far fa-plus-square fa-lg\"}\n                            iconAssigned={(event.assigned) ? true : false}\n                            iconCompleted={event.status === \"closed\"}  // sets iconCompleted to true or false\n                            note={event.note}\n                            onClickComplete={this.modifyEventStatus}\n                            onClickAssign={this.modifyEventAssign}\n                            eventDate={eventDate.date}\n                          />\n                          )\n                        })\n                      }\n                    </div>) \n                  })\n                  : <div className=\"no-events-msg\">\n                    <h3>Welcome back 😄 </h3>\n                    <p>It looks like there aren't any events for this house! To add a new event, click the '+' sign below.</p>\n                    </div>\n                }\n                <div>\n                    <Button\n                      id=\"add-event\"\n                      icon=\"fas fa-plus-circle fa-3x \"\n                      clickEvent={this.clickAddEvent}\n                    ></Button>\n                  </div>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n        <ModalCardBody getHouseholdIdFunction={this.getHouseholdId} ref={this.modalRef} />\n      </section>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport { Container, Row, Col } from \"../Grid/index.js\";\nimport \"./style.css\";\n\nclass MemberFormRow extends React.Component {\n  /* \n    OVERVIEW:\n    The component will consist of 3 inputs: First Name, Last Name, Email\n    Each input has its value tracked continuously by the state, such that the parent compononent can pull that info\n    when the entire form, of which this component will be only one part, is ready to be submitted. By using optional\n    props, we can intialize the component with values already filled in and/or set it to read-only such that the values\n    can never be edited.\n\n    PROPS:\n    firstName: Autofills the First Name input with the supplied value, defaults to blank\n    lastName: Same as firstName, but for the last name input\n    email: Same as above, for email\n    readOnly: 'true': Sets all 3 inputs to read-only mode, 'false': does nothing. Defaults to 'false'. Remove button will also be hidden for read-only rows.\n    showAddButton: 'true': show add new row button, 'false': Do not show add new row button. Defaults to 'false'\n    removeSelf: Requires a function which will remove this component instance from its parent. If no functino is supplied the remove button will not render.\n    addNext: Requires a function which will create a new instance of this component underneath itslef. If none is supplied then the add button will be diabled (if shown).\n    >>NOTE - both addNext & removeSelf buttons will need to contain event.preventDefault() or equivalent. They will be passed an event object.\n    currentParent: Takes the 'this' of the parent. The household object state can only be properly updated if this is supplied at creation time.\n\n    STATE:\n    Note that not all props have a coresponding value in the state, as things like function references should not change after component creation\n    firstName: Will always contain the current value in the First Name input, whether edited by the user or not\n    lastName: Same as above, but for last name\n    email: Again, same thing\n    showAddButton: Toggles whether or not the add button is visable. true: visable, false: hidden\n    \n\n  */\n\n  // The state is initialized based on values for props if given.\n  // The state of this object will always contain the current values for the form fields\n  // so we can then grab them any time we want from the parent when we're ready to submit the whole form\n  state = {\n    firstName: this.props.firstName || \"\",\n    lastName: this.props.lastName || \"\",\n    email: this.props.email || \"\",\n    showAddButton: this.props.showAddButton || false\n  };\n\n  // Calls updateState on parent state and changes the given key/value pair for the member representing this object.\n  updateParentMemberState(key, value) {\n    this.props.currentParent.setState(parentState => {\n      parentState.members[this.props.indexInState][key] = value;\n      return parentState;\n    });\n  }\n\n  // These function track the value of the input fields and keep the state updated continuously with that information\n  handleChangeFirstName = event => {\n    let val = event.target.value;\n    this.setState({ firstName: val });\n    this.updateParentMemberState(\"firstName\", val);\n  };\n  handleChangeLastName = event => {\n    let val = event.target.value;\n    this.setState({ lastName: val });\n    this.updateParentMemberState(\"lastName\", val);\n  };\n  handleChangeEmail = event => {\n    let val = event.target.value;\n    this.setState({ email: val });\n    this.updateParentMemberState(\"email\", val);\n  };\n\n  render() {\n    return (\n      <Container>\n      <Row>\n        <Col size=\"md-12\">\n          <div className=\"member-card\">\n\n            {/* First/Last name row */}\n              <Row settings=\"justify-content-around\">\n                {/* First name */}\n                <Col size=\"6\">\n                  <div className=\"form-group firstName\">\n                    <label>First Name:</label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      placeholder=\"First Name\"\n                      value={this.state.firstName}\n                      onChange={this.handleChangeFirstName}\n                      readOnly={this.props.readOnly}\n                    />\n                  </div>\n                </Col>\n                {/* Last name */}\n                <Col size=\"6\">\n                  <div className=\"form-group lastName\">\n                    <label>Last Name:</label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      placeholder=\"Last Name\"\n                      value={this.state.lastName}\n                      onChange={this.handleChangeLastName}\n                      readOnly={this.props.readOnly}\n                    />\n                  </div>\n                </Col>\n              </Row>\n\n              {/* Email row */}\n              <Row>\n                <Col size=\"md-12\">\n                  <div className=\"form-group email\">\n                    <label>Email:</label>\n                    <input\n                      type=\"email\"\n                      className=\"form-control\"\n                      placeholder=\"Email\"\n                      value={this.state.email}\n                      onChange={this.handleChangeEmail}\n                      readOnly={this.props.readOnly}\n                    />\n                  </div>\n                </Col>\n              </Row>\n\n              {/* Button Row */}\n              <Row>\n                <Col size=\"md-12\">\n                <div className=\"buttons\">\n                  <button\n                className=\"btn btn-sm btn-dark mr-1\"\n                onClick={event => {\n                  this.props.removeSelf(event, this.props.indexInState);\n                }}\n                hidden={this.props.readOnly}\n                disabled={!this.props.removeSelf}\n              >\n                <i className=\"fas fa-minus\"></i>\n              </button>\n              <button\n                className=\"btn btn-sm btn-dark\"\n                onClick={this.props.addNext}\n                hidden={!this.state.showAddButton}\n                disabled={!this.props.addNext}\n              >\n                <i className=\"fas fa-plus\"></i>\n              </button>\n              </div>\n                </Col>\n              </Row>\n            </div>\n        </Col>\n      </Row>\n      </Container>\n    );\n  }\n}\n\nexport default MemberFormRow;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"../Grid/index.js\";\nimport MemberFormRow from \"./MemberFormRow\";\nimport { getLocalUserInfo } from \"../utilityFunctions\";\nimport API from \"../../utils/API\";\nimport * as firebase from \"firebase\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./style.css\";\n\n/* \n    OVERVIEW: \n    In short, this component is initialized with \n\n    PROPS: \n    createMode: (Boolean) If set to 'true', the component will operate and dispaly in 'create' mode. If false, it will operate in edit mode.\n    members: ([Member Object]) This prop MUST recieve an array of member object containing at least one member object\n    >> When creating a new household, this would be a single object containing the new user creating the household\n    >> When editing an existing household, this would be a list conataining all current members as objects\n    >> the members prop is ALLWAYS REQUIRED when creating a new HouseHold component\n    householdName: (String) The name of the household. Not required if creating a new household\n    currentUserId: _id from currently logged in user's member document\n\n    STATE:\n    householdName: It's the name of the household. If the householdName prop was given a value, the state property will be initialized with that value\n    >> otherwise it will be initialized as an empy string.\n    >> The householdName state property is automatically updated any time the corestponding text field is updated (using the handleChangeHouseholdName method)\n    members: Initialized from props.members as a list of member objects. Components for each member object are generated and updated\n    >> dynamically and dynamically update their coresponding user object in the state automatically whenever edited.\n\n    METHODS:\n    isCurrentUser: Take in an ObjectId string that points to a 'Member' object. Returns true if that is the same ObjectId as \n    >> the currently signed in user. Returns false if not.\n    addMemberRow: Takes in a synthetic event object as its only argument. Adds a new, empty, user object \n    >> to the list of members in the state, causing the page to automatically generate a new coresponding MemberFormRow component\n    setIndex: Takes one argument, a number coresponding to an array index. Returns the same number, \n    >> but passed through a const to ensure that the reference will only ever point to that exact number.\n    removeRow: Takes 2 argumens, an event, and an index, coresponding to a member object in the state. Adds a 'deleted' property, \n    >> and sets it to 'true' for the coresonding member object. \n    >> This will cause the coresponding MemberFormRow component to no longer be rendered on the page.\n    handleHouseholdNameChange: Updates the state with the current value of the householdName input field\n    submitHouseForm: Calls the appropriate API method (whether creating or updating) and sends the relevant data to the server\n\n\n*/\n\n// Household create/edit component\nclass HouseHold extends Component {\n  state = {\n    householdName: this.props.householdName || \"\",\n    members: this.props.members,\n    redirectToDashboard: false,\n    redirectToHomepage: false\n  };\n\n  isCurrentUser = (oauthKey) => {\n    // Compare supplied oauthKey to oauthKey of currently logged in user\n    // For debug purposes this function will return true for a set value\n\n    let currentUser = getLocalUserInfo();\n\n    if (!currentUser) {\n      console.log(\"No current user!\");\n      let notLoggedIn = new Error(\"No user data in session storage.\");\n      throw notLoggedIn;\n    }\n    if (oauthKey === currentUser.oauthKey) {\n      return true;\n    }\n    return false;\n  };\n\n  // Adds a blank user object to the state\n  addMemberRow = event => {\n    event.preventDefault();\n    this.setState(currentState => {\n      currentState.members.push({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        status: \"invited\"\n      });\n\n      return currentState;\n    });\n  };\n\n  // Takes an iterator value and freezes it as a const and returns that const\n  // This allows us to store the array index of the object, without being worried that we're pointing to a dynamic variable whos\n  // value might change.\n  setIndex = index => {\n    const frozenIndex = index;\n    return frozenIndex;\n  };\n\n  // Removes the user object from state which coresponds to the row on which the button was clicked\n  removeRow = (event, i) => {\n    event.preventDefault();\n    this.setState(currentState => {\n      currentState.members[i].deleted = true;\n      return currentState;\n    });\n  };\n\n  // Updates the householdName in the state any time the input field for household name is updated\n  handleChangeHouseholdName = event => {\n    let val = event.target.value;\n    this.setState({ householdName: val });\n  };\n\n  // Submit/update household\n  submitHouseForm = event => {\n    event.preventDefault();\n\n    // If creating new household:\n    if (this.props.createMode === true) {\n      // Create household in database\n      API.createHousehold({ name: this.state.householdName })\n        .then(results1 => {\n          // Add newly created household id to state\n          this.setState({ householdId: results1.data._id });\n          // Also add it to session storage\n          sessionStorage.setItem(\"householdId\", results1.data._id);\n\n          // Continue operation with this then to avoid race condition if householdId isn't returned fast enough\n          // Add or update members in database and include household Id\n          API.upsertMembers({\n            members: this.state.members,\n            householdId: results1.data._id\n          })\n            .then(results2 => {\n              // Create list of ids to add to household document\n              let idsArray = [];\n\n              // On success, look through results\n              results2.data.newIds.forEach(member => {\n                // If is current user, add that objectId to session storage\n                if (\n                  member.userOauthKey &&\n                  this.isCurrentUser(member.userOauthKey)\n                ) {\n                  sessionStorage.setItem(\"userID\", member._id);\n                }\n\n                // Add all user ids to an array for update to household members list\n                idsArray.push(member._id);\n              });\n\n              // Update household with user ids\n              API.addHouseholdMembers({\n                householdId: results1.data._id,\n                idsArray: idsArray\n              }).then(result3 => {\n                // Redirect to dashboard\n                this.setState({ redirectToDashboard: true });\n              })\n              .catch((err) => {\n                console.log(err);\n              })\n            })\n            .catch(function(err) {\n              console.log(\"error with create many members operation\");\n              console.log(err);\n            });\n        })\n        .catch(err => {\n          console.log(\"ERROR with create household operation\");\n          console.log(err);\n        });\n    }\n    // If updating and existing household:\n    else {\n      //TODO: Write api call for udating household\n      console.log(\"Update functionality not yet implemented!\");\n    }\n  };\n\n  handleCancel = event => {\n    event.preventDefault();\n    console.log('hit handleCancel')\n\n    // clear session storage\n    sessionStorage.clear();\n    console.log('hit handleCancel')\n\n\n    // logout of firebase\n    firebase.auth().signOut().then(() => {\n      console.log('signout successful');\n      // redirect to homepage\n      this.setState({ redirectToHomepage: true });\n    }, function(err) {\n      console.log(err);\n    });\n  }\n\n  render() {\n    // If redirect is set to true, redirect to dashboard, else render component\n    if (this.state.redirectToDashboard) {\n      return <Redirect to=\"/dashboard\" />;\n    }\n\n    // If redirect is set to true, redirect to homepage\n    if (this.state.redirectToHomepage) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n        <Row>\n          <Col size=\"md-12\">\n        <form>\n          {/* Title */}\n          <Row>\n            <div className=\"justify-content-center\" id=\"signupTitle\">\n              <Col size=\"md-12\">\n                <h4 className=\"text-center\">\n                  {this.props.createMode ? \"Create \" : \"Edit \"} Household\n                </h4>\n              </Col>\n            </div>\n          </Row>\n          {/* Household Name Input */}\n          <Row>\n            <Col size=\"md-12\">\n              <div className=\"form-group\">\n                <h5>Enter a House Name</h5>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col size=\"md-12\">\n              <div>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"householdNameInput\"\n                  placeholder=\"Smith\"\n                  onChange={this.handleChangeHouseholdName}\n                  value={this.state.householdName}\n                />\n              </div>\n            </Col>\n          </Row>\n\n          {/* Member input */}\n          <Row>\n            <Col size=\"md-12\">\n              <h5>Add/Edit Members </h5>\n            </Col>\n          </Row>\n\n          {/* Member cards */}\n          <Row>\n            <Col size=\"md-12\">\n            {this.state.members.map((member, i) => {\n            // If we've set the deleted key in the member object that coresponds to this component to 'true', don't render it\n            if (!member.deleted) {\n              return (\n                <MemberFormRow\n                  key={this.setIndex(i)}\n                  firstName={member.firstName}\n                  lastName={member.lastName}\n                  email={member.email}\n                  // Add readonly attribute if member object matches currently logged in member (You can't delete yourself)\n                  readOnly={this.isCurrentUser(member.userOauthKey)}\n                  // While the component allows for dynamically hiding the add button. There is no good reason to do so at this time.\n                  showAddButton={true}\n                  // Hook into function for adding new member form rows\n                  addNext={this.addMemberRow}\n                  // Save and lock in index in list of member objects that this component is attached to\n                  indexInState={this.setIndex(i)}\n                  // Hook into function for removing form row (the indexInState value will be passed in along with the event)\n                  removeSelf={this.removeRow}\n                  // Pass Parent context to child for ability to hook into parent state from within child\n                  currentParent={this}\n                />\n              );\n            }\n          })}\n            </Col>\n          </Row>\n          \n          \n          {/* Form Buttons */}\n          <Row>\n            <div id=\"housebuttons\">\n              <Col size=\"md-12\">\n                  <button className=\"btn btn-success\" id=\"createbutton\" onClick={this.submitHouseForm}>\n                    {this.props.createMode ? \"Create\" : \"Update\"}\n                  </button>\n                <button className=\"btn btn-danger\" id=\"cancelbutton\" onClick={this.handleCancel}>\n                  Cancel\n                </button>\n              </Col>\n              </div>\n          </Row> \n\n          </form>\n        </Col>\n      </Row>\n    );\n  }\n}\n\n// Set defaults for props:\nHouseHold.defaultProps = {\n  householdName: \"\"\n};\n\nexport default HouseHold;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"../components/Grid/index.js\";\nimport HouseHold from \"../components/HouseHold\";\nimport { getLocalUserInfo } from \"../components/utilityFunctions\";\nimport \"./style/Signup.css\";\n\nclass Signup extends Component {\n  render() {\n    // Get newly generated user info, from firebase, out of session storage\n    let currentUser = getLocalUserInfo();\n\n    return (\n      <section>\n        <Container>\n          <HouseHold\n            createMode={true}\n            householdName={currentUser.lastName}\n            //Add the info from current user to list of members\n            members={[\n              {\n                userOauthKey: currentUser.oauthKey,\n                firstName: currentUser.firstName,\n                lastName: currentUser.lastName,\n                email: currentUser.email,\n                status: \"full\"\n              }\n            ]}\n          />\n        </Container>\n      </section>\n    );\n  }\n}\n\nexport default Signup;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"../Grid\";\nimport * as firebase from \"firebase\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport API from \"../../utils/API\";\nimport \"../../pages/style/Home.css\";\n\nclass SignIn extends Component {\n  // This is our firebaseui configuration object\n  uiConfig = {\n    signInFlow: \"redirect\",\n    signInSuccessUrl: \"/dashboard\",\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\n    callbacks: {\n      signInSuccessWithAuthResult: (authResult, redirectUrl) => {\n        // store the user Auth key in session storage\n        sessionStorage.setItem(\"id\", authResult.user.uid);\n\n        // store the user display name\n        var displayName = authResult.user.displayName;\n\n        // store the user email\n        var email = authResult.user.email;\n\n        // store email in session storage\n        sessionStorage.setItem(\"email\", email);\n\n        // split the display name to first and last name\n        var displayNameArray = displayName.split(\" \");\n        var firstName = displayNameArray[0];\n        var lastName = displayNameArray[1];\n\n        // store the information in session storage\n        sessionStorage.setItem(\"firstName\", firstName);\n        sessionStorage.setItem(\"lastName\", lastName);\n\n        // retrive the information from session storage and store in an object to send through the API call\n        var userData = {\n          id: sessionStorage.getItem(\"id\"),\n          firstName: sessionStorage.getItem(\"firstName\"),\n          lastName: sessionStorage.getItem(\"lastName\"),\n          email: sessionStorage.getItem(\"email\")\n        };\n\n        // Send API call to evaluate:\n        API.login(userData)\n          .then(res => {\n            // console.log(`res.data: ${JSON.stringify(res.data)}`)\n            // If status 200, user exists and is good to go\n            if (res.status === 200) {\n              // grab user ID and household ID found in the database\n              // Predefine let variables to avoid scope problems\n              let userID;\n              let householdID\n              // Based on whether or not res.data reurns an array, or a single results, extract data\n              if (res.data[0]) {\n                userID = res.data[0]._id;\n                householdID = res.data[0].households[0]; // Grabs only the first household a user belongs to becuse MVP\n              } else {\n                userID = res.data._id;\n                householdID = res.data.households[0]; // Grabs only the first household a user belongs to becuse MVP\n              }\n\n              // store user ID and household ID in session storage\n              sessionStorage.setItem(\"userID\", userID);\n              sessionStorage.setItem(\"householdId\", householdID);\n\n              this.props.parent.setState({ redirectDashboard: true });\n            }\n            // If status 204, user does not exist, send to signup flow\n            else if (res.status === 204) {\n              this.props.parent.setState({ redirectSignUp: true });\n            }\n            // If neither of those is true, something is broken\n            else {\n              console.log(\"Invalid status recieved from res:\", res.status);\n            }\n          })\n          .catch(err => console.log(err));\n      }\n    }\n  };\n\n  render() {\n    return (\n        <Row>\n          <Col size=\"md-12\">\n            <StyledFirebaseAuth\n              uiConfig={this.uiConfig}\n              firebaseAuth={firebase.auth()}\n            />\n          </Col>\n        </Row>\n    );\n  }\n}\n\nexport default SignIn;\n","import React, { Component, Fragment } from \"react\";\nimport { Container, Row, Col } from \"../Grid\";\nimport './style.css';\n\n\nclass LoginText extends Component {\n\n    render() {\n        \n        return (\n            <Container>\n                    <Row>\n                        <Col size=\"md-12\">\n                            <div className=\"header\">\n                                <h3>Welcome to ParentTrap.</h3>\n                                <p className=\"description\">Designed to simplify your family's busy schedule.</p>\n                            </div>\n                        </Col>\n                    </Row>\n            </Container>\n        );\n    }\n}\n\nexport default LoginText;","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"../components/Grid/index.js\";\nimport \"./style/Home.css\";\nimport SignIn from \"../components/Firebase/index\";\nimport { Redirect } from \"react-router-dom\";\nimport LoginText from \"../components/LoginText\";\nimport posed from \"react-pose\";\n\nconst Content = posed.div({\n  closed: { \n      height: 0,\n   },\n  open: { \n      height: 'auto',\n  }\n});\n\nclass Home extends Component {\n  state = {\n    redirectDashboard: false, // Set this to true to redirect to dashboard\n    redirectSignUp: false, // Set this to true to redirect to signup flow\n    open: false // this controls opening and closing the questions\n  };\n\n  render() {\n    const { open } = this.state;\n\n        let instructions = [{\n            title: \"How does it work?\",\n            body: \"Simply create a household, add members, and begin populating and taking control of your family's to-do list. *drops mic*\"\n        }, {\n            title: \"How did this get started?\",\n            body: \"After searching for ways to easy organize a family's to-do list and coming up empty, four software engineers put their minds together and the rest is history...\"\n        }]\n\n    if (this.state.redirectDashboard) {\n      console.log(\"Redirect to dashboard\");\n      return <Redirect to=\"/dashboard\" />;\n    }\n\n    if (this.state.redirectSignUp) {\n      console.log('redirect to signup')\n      return <Redirect to=\"/signup\" />;\n    }\n\n    return (\n      <section id=\"home-screen\">\n        <Container>\n            <Row>\n              <Col size=\"md-12\">\n                <LoginText />\n              </Col>\n            </Row>\n            <div id=\"gray-card\">\n            <Row>\n              <Col size=\"md-12\">\n              <div id=\"faqs\">\n                  {instructions.map(({ title, body }, i) => (\n                      <div>\n                          <h2 className=\"title\" onClick={() => this.setState({ open: open === i ? false : i })}>\n                              {open === i ? \"-\" : \"+\"}\n                              {title}  \n                          </h2>\n                          <Content className=\"content\" pose={open === i ? 'open' : 'closed'}>\n                              <div className=\"content-wrapper\">{body}</div>\n                          </Content>\n                      </div>\n                  ))}\n                  </div>\n              </Col>\n            </Row>\n            <Row>\n              <Col size=\"md-12\">\n                <div id=\"button\"> \n                  <SignIn parent={this} />\n                </div>\n              </Col>\n            </Row>\n            </div>\n        </Container>\n      </section>\n    );\n  }\n}\n\nexport default Home;\n","const firebaseConfig = {\r\n    apiKey: \"AIzaSyC4cgBn3J_wiua8oGfpdHuCBtsrHy58Bnc\",\r\n    authDomain: \"parent-trap-a7eed.firebaseapp.com\",\r\n    databaseURL: \"https://parent-trap-a7eed.firebaseio.com\",\r\n    projectId: \"parent-trap-a7eed\",\r\n    storageBucket: \"parent-trap-a7eed.appspot.com\",\r\n    messagingSenderId: \"122704905189\",\r\n    appId: \"1:122704905189:web:a87d77d6555fa220d8e50c\",\r\n    measurementId: \"G-B3K4D8QFS4\"\r\n  };\r\n\r\nexport default firebaseConfig;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Dashboard from './pages/Dashboard';\nimport SignUp from './pages/Signup';\nimport Home from './pages/Home';\nimport withFirebaseAuth from 'react-with-firebase-auth'\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseConfig from './components/Firebase/firebaseConfig';\n\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nclass App extends Component {\n  render() {\n\n    return (\n      <Router>\n        <div>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/dashboard\" component={Dashboard} />\n              <Route exact path=\"/signup\" component={SignUp}  />\n            </Switch>\n          </div>\n      </Router>\n    );\n  }\n}\n\n\nconst firebaseAppAuth = firebaseApp.auth();\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\n\nexport default withFirebaseAuth({\n    providers,\n    firebaseAppAuth,\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n  // Get user info object from client storage\n  getLocalUserInfo: function() {\n    return {\n      firstName: sessionStorage.getItem(\"firstName\"),\n      lastName: sessionStorage.getItem(\"lastName\"),\n      email: sessionStorage.getItem('email'),\n      oauthKey: sessionStorage.getItem(\"id\"), // Oauth id\n      memberId: sessionStorage.getItem(\"userID\"), // Mongoose object id for memeber document\n      currentHouseholdId: sessionStorage.getItem(\"householdId\") // Mongoose object id for current household\n    };\n  }\n};\n"],"sourceRoot":""}